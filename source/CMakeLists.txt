#
# 项目名
#
IF(CMAKE_BUILD_TYPE STREQUAL Debug)

	SET(PROGRAM_NAME        tinyToolkitd)
	SET(PROGRAM_NAME_SHARE  tinyToolkitd)
	SET(PROGRAM_NAME_STATIC tinyToolkitd_static)

ELSE()

	SET(PROGRAM_NAME        tinyToolkit)
	SET(PROGRAM_NAME_SHARE  tinyToolkit)
	SET(PROGRAM_NAME_STATIC tinyToolkit_static)

ENDIF()


#
# 定义当前目录下源文件分组
#
IF(WIN32)

	#
	# 遍历递归当前目录定义源文件分组
	#
	RECURSE_CURRENT_DIRECTORY_SOURCE_FILE_GROUP()

ENDIF()


#
# 库文件的生成目录
#
IF(WIN32)

	#
	# 设置库文件生成目录
	#
	SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)

ELSE()

	#
	# 设置库文件生成目录
	#
	SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)

ENDIF()


#
# 遍历递归当前目录获取源文件
#
RECURSE_CURRENT_DIRECTORY_SOURCE_FILE(SOURCE_FILES)


#
# 链接源文件, 生成库文件
#
ADD_LIBRARY(${PROGRAM_NAME_SHARE}  SHARED ${SOURCE_FILES})
ADD_LIBRARY(${PROGRAM_NAME_STATIC} STATIC ${SOURCE_FILES})


#
# 第三方库
#
IF(WITH_FMT)

	#
	# 链接库
	#
	TARGET_LINK_LIBRARIES(${PROGRAM_NAME_SHARE}  PUBLIC fmt -L${WITH_FMT}/lib)
	TARGET_LINK_LIBRARIES(${PROGRAM_NAME_STATIC} PUBLIC fmt -L${WITH_FMT}/lib)

	#
	# 包含库
	#
	TARGET_INCLUDE_DIRECTORIES(${PROGRAM_NAME_SHARE}  PUBLIC ${WITH_FMT}/include)
	TARGET_INCLUDE_DIRECTORIES(${PROGRAM_NAME_STATIC} PUBLIC ${WITH_FMT}/include)

ELSE()

	#
	# 链接库
	#
	TARGET_LINK_LIBRARIES(${PROGRAM_NAME_SHARE}  PUBLIC fmt)
	TARGET_LINK_LIBRARIES(${PROGRAM_NAME_STATIC} PUBLIC fmt)

ENDIF()


#
# 指定输出名称
#
SET_TARGET_PROPERTIES(${PROGRAM_NAME_SHARE}  PROPERTIES OUTPUT_NAME ${PROGRAM_NAME})
SET_TARGET_PROPERTIES(${PROGRAM_NAME_STATIC} PROPERTIES OUTPUT_NAME ${PROGRAM_NAME})


#
# 使动态库和静态库同时存在
#
SET_TARGET_PROPERTIES(${PROGRAM_NAME_SHARE}  PROPERTIES CLEAN_DIRECT_OUTPUT 1)
SET_TARGET_PROPERTIES(${PROGRAM_NAME_STATIC} PROPERTIES CLEAN_DIRECT_OUTPUT 1)


#
# 指定动态库版本
#
SET_TARGET_PROPERTIES(${PROGRAM_NAME_SHARE} PROPERTIES VERSION 0.0.2)


#
# 安装库文件
#
INSTALL(TARGETS ${PROGRAM_NAME_SHARE} ${PROGRAM_NAME_STATIC}
		LIBRARY DESTINATION ${LIBRARY_INSTALL_PREFIX}
		ARCHIVE DESTINATION ${LIBRARY_INSTALL_PREFIX})


#
# 遍历递归指定目录安装头文件
#
TRAVERSE_INSTALL_INCLUDE(id							${INCLUDE_INSTALL_PREFIX}/id)
TRAVERSE_INSTALL_INCLUDE(hash						${INCLUDE_INSTALL_PREFIX}/hash)
TRAVERSE_INSTALL_INCLUDE(pool						${INCLUDE_INSTALL_PREFIX}/pool)
TRAVERSE_INSTALL_INCLUDE(util					    ${INCLUDE_INSTALL_PREFIX}/util)
TRAVERSE_INSTALL_INCLUDE(debug						${INCLUDE_INSTALL_PREFIX}/debug)
TRAVERSE_INSTALL_INCLUDE(timer						${INCLUDE_INSTALL_PREFIX}/timer)
TRAVERSE_INSTALL_INCLUDE(common						${INCLUDE_INSTALL_PREFIX}/common)
TRAVERSE_INSTALL_INCLUDE(crypto						${INCLUDE_INSTALL_PREFIX}/crypto)
TRAVERSE_INSTALL_INCLUDE(logger						${INCLUDE_INSTALL_PREFIX}/logger)
TRAVERSE_INSTALL_INCLUDE(option						${INCLUDE_INSTALL_PREFIX}/option)
TRAVERSE_INSTALL_INCLUDE(container					${INCLUDE_INSTALL_PREFIX}/container)
TRAVERSE_INSTALL_INCLUDE(${CMAKE_CURRENT_LIST_DIR}	${INCLUDE_INSTALL_PREFIX})
